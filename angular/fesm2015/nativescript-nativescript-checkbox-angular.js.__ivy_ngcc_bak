import { forwardRef, Directive, ElementRef, Inject, HostListener, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { registerElement, BaseValueAccessor } from '@nativescript/angular';
import { CheckBox } from '@nstudio/nativescript-checkbox';

function convertToInt(value) {
    let normalizedValue;
    if (value === undefined || value === null) {
        normalizedValue = 0;
    }
    else {
        if (typeof value === 'number') {
            normalizedValue = value;
        }
        else {
            const parsedValue = parseInt(value.toString(), 10);
            normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;
        }
    }
    return Math.round(normalizedValue);
}
registerElement('CheckBox', () => CheckBox);
const CHECKED_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => CheckedValueAccessor),
    multi: true
};
/**
 * The accessor for setting checked property and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <CheckBox [(ngModel)]="model.test">
 *  ```
 */
class CheckedValueAccessor extends BaseValueAccessor {
    constructor(elementRef) {
        super(elementRef.nativeElement);
        this.onTouched = () => { };
    }
    checkedChangeListener(event) {
        this.onChange(event.value);
    }
    writeValue(value) {
        this.view.checked = value;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
CheckedValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'CheckBox[ngModel], CheckBox[formControlName], CheckBox[formControl], checkBox[ngModel], checkBox[formControlName], checkBox[formControl], check-box[ngModel], check-box[formControlName], check-box[formControl]',
                providers: [CHECKED_VALUE_ACCESSOR]
            },] }
];
CheckedValueAccessor.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
CheckedValueAccessor.propDecorators = {
    checkedChangeListener: [{ type: HostListener, args: ['checkedChange', ['$event'],] }]
};
class TNSCheckBoxModule {
}
TNSCheckBoxModule.decorators = [
    { type: NgModule, args: [{
                declarations: [CheckedValueAccessor],
                providers: [],
                imports: [FormsModule],
                exports: [FormsModule, CheckedValueAccessor]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { CheckedValueAccessor, TNSCheckBoxModule };
//# sourceMappingURL=nativescript-nativescript-checkbox-angular.js.map
